[{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"SLSEdesign","text":"","code":"# required dependencies require(SLSEdesign) #> Loading required package: SLSEdesign require(CVXR) #> Loading required package: CVXR #>  #> Attaching package: 'CVXR' #> The following object is masked from 'package:stats': #>  #>     power"},{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"specify-the-input-for-the-program","dir":"Articles","previous_headings":"","what":"Specify the input for the program","title":"SLSEdesign","text":"N: Number design points S: design space tt: level skewness θ\\theta: parameter vector FUN: function calculating derivatives given model","code":"N <- 21 S <- c(-1, 1) tt <- 0 theta <- rep(1, 4)  poly3 <- function(xi,theta){     matrix(c(1, xi, xi^2, xi^3), ncol = 1) }  u <- seq(from = S[1], to = S[2], length.out = N)  res <- Aopt(N = N, u = u, tt = tt, FUN = poly3,              theta = theta)"},{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"manage-the-outputs","dir":"Articles","previous_headings":"Specify the input for the program","what":"Manage the outputs","title":"SLSEdesign","text":"Showing optimal design support points can plot ","code":"res$design #>    location  weight #> 1      -1.0 0.17905 #> 2      -0.9 0.00159 #> 3      -0.8 0.00310 #> 4      -0.7 0.00378 #> 5      -0.6 0.00346 #> 6      -0.5 0.00226 #> 8      -0.3 0.30676 #> 14      0.3 0.30676 #> 16      0.5 0.00226 #> 17      0.6 0.00346 #> 18      0.7 0.00378 #> 19      0.8 0.00310 #> 20      0.9 0.00159 #> 21      1.0 0.17905 plot_weight(res$design)"},{"path":[]},{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"d-optimal-design","dir":"Articles","previous_headings":"Specify the input for the program > Plot the directional derivative to use the equivalence theorem for 3rd order polynomial models","what":"D-optimal design","title":"SLSEdesign","text":"","code":"poly3 <- function(xi,theta){     matrix(c(1, xi, xi^2, xi^3), ncol = 1) } design <- data.frame(location = c(-1, -0.447, 0.447, 1),  weight = rep(0.25, 4)) u = seq(-1, 1, length.out = 201) plot_dispersion(u, design, tt = 0, FUN = poly3,   theta = rep(0, 4), criterion = \"D\")"},{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"a-optimal-design","dir":"Articles","previous_headings":"Specify the input for the program > Plot the directional derivative to use the equivalence theorem for 3rd order polynomial models","what":"A-optimal design","title":"SLSEdesign","text":"","code":"poly3 <- function(xi, theta){   matrix(c(1, xi, xi^2, xi^3), ncol = 1) } design <- data.frame(location = c(-1, -0.464, 0.464, 1),                     weight = c(0.151, 0.349, 0.349, 0.151)) u = seq(-1, 1, length.out = 201) plot_dispersion(u, design, tt = 0, FUN = poly3, theta = rep(0,4), criterion = \"A\")"},{"path":"https://chikuang.github.io/SLSEdesign/articles/SLSEdesign.html","id":"plot-the-directional-derivative-to-use-the-equivalence-theorem-for-peleg-model-under-c-optimality","dir":"Articles","previous_headings":"Specify the input for the program","what":"Plot the directional derivative to use the equivalence theorem for peleg model under c-optimality","title":"SLSEdesign","text":"","code":"my_peleg <- function(xi, theta) {   deno <- (theta[1] + theta[2]*xi)   matrix(c(-xi/deno^2, -xi^2/deno^2), ncol = 1) } Npt <- 1001 my_u <- seq(0, 100, length.out = Npt) my_theta <- c(0.5, 0.05) my_cVec <- c(1, 1) my_design <- copt(   N = Npt, u = my_u,   tt = 0, FUN = my_peleg, theta = my_theta, num_iter = 50000,   cVec = my_cVec )  plot_dispersion(my_u, my_design$design, tt = 0, FUN = my_peleg, theta = my_theta, criterion = \"c\", cVec = my_cVec)"},{"path":"https://chikuang.github.io/SLSEdesign/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chi-Kuang Yeh. Author, maintainer. Julie Zhou. Author, contributor. Jason Hou-Liu. Contributor.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yeh C, Zhou J (2025). SLSEdesign: Optimal Regression Design Second-Order Least Squares Estimator. R package version 0.0.5, https://github.com/chikuang/SLSEdesign.","code":"@Manual{,   title = {SLSEdesign: Optimal Regression Design under the Second-Order Least Squares Estimator},   author = {Chi-Kuang Yeh and Julie Zhou},   year = {2025},   note = {R package version 0.0.5},   url = {https://github.com/chikuang/SLSEdesign}, }"},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"package compute optimal regression design second-order Least squares estimator","code":""},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"SLSEdesign now available CRAN. Hence may install typing may download develop version typing","code":"install.packages(\"SLSEdesign\") devtools::install_github(\"chikuang/SLSEdesign\") # or pak::pkg_install(\"chikuang/SLSEdesign\") library(SLSEdesign)"},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"Consider general regression model, yi=η(𝐱i,𝛉)+ϵi,=1,…,n,y_i=\\eta(\\mathbf{x}_i, \\mathbf{\\theta})+ \\epsilon_i, \\quad =1, \\ldots, n, yiy_i ii-th observation response variable yy design point 𝐱i∈S⊂ℝp\\mathbf{x}_i \\S \\subset \\mathbb{R}^p, SS design space, 𝛉∈ℝq\\mathbf{\\theta} \\\\mathbb{R}^q unknown regression parameter vector, response function η(𝐱i,𝛉)\\eta(\\mathbf{x}_i, \\mathbf{\\theta}) can linear nonlinear function 𝛉\\mathbf{\\theta}, errors ϵi\\epsilon_i assumed uncorrelated mean zero finite variance σ2\\sigma^2. Let 𝛉̂\\hat{\\mathbf{\\theta}} estimator 𝛉\\mathbf{\\theta}, least squares estimator. Various optimal designs defined minimizing ϕ(𝕔ov(𝛉̂))\\phi \\left( \\mathbb{c}ov(\\hat{\\mathbf{\\theta}}) \\right) design points 𝐱1,…,𝐱n\\mathbf{x}_1, \\ldots, \\mathbf{x}_n, function ϕ(⋅)\\phi(\\cdot) can determinant, trace, scalar functions. resulting designs called optimal exact designs (OEDs), depend response function η(⋅,⋅)\\eta(\\cdot,\\cdot), design space SS, estimator 𝛉̂\\hat{\\mathbf{\\theta}}, scalar function ϕ(⋅)\\phi(\\cdot), number points nn. Second order least-squares estimator defined (𝛉̂⊤,σ̂2)⊤:=argmin𝛉,σ2∑=1n(yi−η(𝐱i;𝛉)yi2−η2(𝐱i;𝛉)−σ2)W(𝐱i)(yi−η(𝐱i;𝛉)yi2−η2(𝐱i;𝛉)−σ2).(\\mathbf{\\hat{\\theta}}^\\top,\\hat{\\sigma}^2)^\\top:=\\underset{\\mathbf{\\theta},\\sigma^2}{\\mathrm{argmin}}\\sum_{=1}^n \\begin{pmatrix} y_i-\\eta(\\mathbf{x}_i;\\mathbf{\\theta}) & y_i^2-\\eta^2(\\mathbf{x}_i;\\mathbf{\\theta})-\\sigma^2 \\end{pmatrix} W(\\mathbf{x}_i) \\begin{pmatrix} y_i-\\eta(\\mathbf{x}_i;\\mathbf{\\theta})\\\\ y_i^2-\\eta^2(\\mathbf{x}_i;\\mathbf{\\theta})-\\sigma^2 \\end{pmatrix}.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"comparison-between-ordinary-least-squares-and-second-order-least-squares-estimators","dir":"","previous_headings":"Details","what":"Comparison between ordinary least-squares and second order least-squares estimators","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"Note $`W(\\mathbf{x}_i)`$ $`2\\times 2`$ non-negative semi-definite matrix may may depend 𝐱i\\mathbf{x}_i (Wang Leblanc, 2008). clear SLSE natural extension OLSE defined based first-order difference function (.e. $`y_i-\\mathbb{E}[y_i]=y_i-\\eta(\\mathbf{x}_i;\\mathbf{\\theta})`$). hand, SLSE defined using first-order difference function, also second-order difference function (.e. $`y_i^2-\\mathbb{E}[y_i^2]=y_i^2-(\\eta^2(\\mathbf{x}_i;\\mathbf{\\theta})+\\sigma^2))`$. One might think downsides SLSE discussing advantages OLSE. SLSE disadvantages. linear estimator, closed-form solution. requires computational resources compared OLSE due nonlinearity. However, numerical results can easily computed SLSE nowadays. result, SLSE powerful alternative estimator considered research studies real-life applications. particular, set skewness parameter tt zero, resulting optimal designs SLSE OLSE !","code":""},{"path":[]},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"d-optimal-design-of-the-3rd-order-polynomial-regression-model","dir":"","previous_headings":"Examples","what":"D-optimal design of the 3rd order polynomial regression model","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"yi=β0+β1xi+β2xi2+β3xi3+εiy_i = \\beta_0 + \\beta_1 x_i + \\beta_2 x_i^2 + \\beta_3 x_i^3 +\\varepsilon_i partial derivative mean function required: first calculate D-optimal design skewness parameter t set zero. resulting D-optimal design optimal design ordinary least-squares estimator. Now look situation skewness parameter t interval (0, 1], instance, 0.70.7. Add equivalence theorem plot D-optimal design:","code":"poly3 <- function(xi,theta){     matrix(c(1, xi, xi^2, xi^3), ncol = 1) } my_design <- Dopt(N = 31, u = seq(-1, 1, length.out = 31),       tt = 0, FUN = poly3, theta = rep(1, 4), num_iter = 500) my_design$design #    location    weight # 1      -1.0 0.2615264 # 10     -0.4 0.2373288 # 22      0.4 0.2373288 # 31      1.0 0.2615264 my_design$val # 5.133616 my_design <- Dopt(N = 31, u = seq(-1, 1, length.out = 31),       tt = 0.7, FUN = poly3, theta = rep(1, 4), num_iter = 500) my_design$design #    location    weight # 1      -1.0 0.2714088 # 10     -0.4 0.2287621 # 22      0.4 0.2287621 # 31      1.0 0.2714088 my_design$val # 6.27293 design = data.frame(location = c(-1, -0.447, 0.447, 1),  weight = rep(0.25, 4)) u = seq(-1, 1, length.out = 201) plot_dispersion(u, design, tt = 0, FUN = poly3,   theta = rep(0, 4), criterion = \"D\")"},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"d-optimal-design-of-the-3rd-order-polynomial-regression-model-without-intercept","dir":"","previous_headings":"Examples","what":"D-optimal design of the 3rd order polynomial regression model without intercept","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"yi=β1xi+β2xi2+β3xi3+εiy_i = \\beta_1 x_i + \\beta_2 x_i^2 + \\beta_3 x_i^3 +\\varepsilon_i last example, support points change t increases. However, always case, . optimal design may depending t.","code":"poly3_no_intercept <- function(xi, theta){     matrix(c(xi, xi^2, xi^3), ncol = 1) } my_design <- Dopt(N = 31, u = seq(-1, 1, length.out = 31),       tt = 0, FUN = poly3_no_intercept, theta = rep(1, 3), num_iter = 500) my_design$design #    location    weight # 1      -1.0 0.3275005 # 7      -0.6 0.1565560 # 25      0.6 0.1565560 # 31      1.0 0.3275005 my_design$val # 3.651524  my_design <- Dopt(N = 31, u = seq(-1, 1, length.out = 31),       tt = 0.9, FUN = poly3_no_intercept, theta = rep(1, 3), num_iter = 500) my_design$design #    location    weight # 1      -1.0 0.2888423 # 10     -0.4 0.2096781 # 22      0.4 0.2096781 # 31      1.0 0.2888423 my_design$val # 4.892601"},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"Version update develop version Add c-optimality criterion Merge functions compute directional derivatives. Maybe adding extra argument indicate design criterion used. Improve computational speed vectorizing code, remove loops Merge functions compute optimal designs -, c-, D-optimality, namely copt, Dopt, Aopt functions Python Julia version package, expected faster R Shiny App Write package page explain utility package","code":""},{"path":"https://chikuang.github.io/SLSEdesign/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Optimal Regression Design under the Second-Order Least Squares Estimator","text":"Gao, Lucy L. Zhou, Julie. (2017). D-optimal designs based second-order least squares estimator. Statistical Papers, 58, 77–94. Gao, Lucy L. Zhou, Julie. (2014). New optimal design criteria regression models asymmetric errors. Journal Statistical Planning Inference, 149, 140-151. Wang, Liqun Leblanc, Alexandre. (2008). Second-order nonlinear least squares estimation. Annals Institute Statistical Mathematics, 60, 883–900. Yeh, Chi-Kuang Zhou, Julie. (2021). Properties optimal regression designs second-order least squares estimator. Statistical Papers, 62, 75–92. Yin, Yue Zhou, Julie. (2017). Optimal designs regression models using second-order least squares estimator. Statistica Sinica, 27, 1841-1856.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"Calculate -optimal design second-order Least squares estimator","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"","code":"Aopt(N, u, tt, FUN, theta, num_iter = 1000)"},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"N number sample points design space. u discretized design space. tt level skewness 0 1 (inclusive). tt=0, equivalent compute -optimal design ordinary least squares estimator. FUN function calculate derivative given model. theta parameter value model. num_iter Maximum number iteration.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"list contains 1. Value objective function solution. 2. Status. 3. Optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"function calculates -optimal design loss function -optimality. loss function -optimality defined trace inverse Fisher information matrix","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Aopt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the A-optimal design under the second-order Least squares estimator — Aopt","text":"","code":"poly3 <- function(xi, theta){   matrix(c(1, xi, xi^2, xi^3), ncol = 1) } Npt <- 101 my_design <- Aopt(N = Npt, u = seq(-1, +1, length.out = Npt),    tt = 0, FUN = poly3, theta = rep(0,4), num_iter = 2000) round(my_design$design, 3) #>     location weight #> 1      -1.00  0.161 #> 10     -0.82  0.001 #> 11     -0.80  0.001 #> 12     -0.78  0.001 #> 13     -0.76  0.002 #> 14     -0.74  0.002 #> 15     -0.72  0.002 #> 16     -0.70  0.002 #> 17     -0.68  0.002 #> 18     -0.66  0.002 #> 19     -0.64  0.002 #> 20     -0.62  0.002 #> 21     -0.60  0.002 #> 22     -0.58  0.002 #> 23     -0.56  0.002 #> 24     -0.54  0.002 #> 25     -0.52  0.002 #> 26     -0.50  0.001 #> 27     -0.48  0.001 #> 28     -0.46  0.001 #> 34     -0.34  0.308 #> 68      0.34  0.308 #> 74      0.46  0.001 #> 75      0.48  0.001 #> 76      0.50  0.001 #> 77      0.52  0.002 #> 78      0.54  0.002 #> 79      0.56  0.002 #> 80      0.58  0.002 #> 81      0.60  0.002 #> 82      0.62  0.002 #> 83      0.64  0.002 #> 84      0.66  0.002 #> 85      0.68  0.002 #> 86      0.70  0.002 #> 87      0.72  0.002 #> 88      0.74  0.002 #> 89      0.76  0.002 #> 90      0.78  0.001 #> 91      0.80  0.001 #> 92      0.82  0.001 #> 101     1.00  0.161 my_design$val #> [1] 32.92169"},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the D-optimal design under the SLSE — Dopt","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"Calculate D-optimal design SLSE","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"","code":"Dopt(N, u, tt, FUN, theta, num_iter = 1000)"},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"N number sample points design space. u discretized design space. tt level skewness. tt=0, equivalent compute D-optimal design ordinary least squares estimator. FUN function calculate derivative given model. theta parameter value model. num_iter Maximum number iteration.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"list contains 1. Value objective function solution. 2. Status. 3. Optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"function calculates D-optimal design loss function D-optimality. loss function D-optimality defined log determinant inverse Fisher information matrix.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/Dopt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the D-optimal design under the SLSE — Dopt","text":"","code":"poly3 <- function(xi, theta){   matrix(c(1, xi, xi^2, xi^3), ncol = 1) } Npt <- 101 my_design <- Dopt(N = Npt, u = seq(-1, +1, length.out = Npt),    tt = 0, FUN = poly3, theta = rep(0,4), num_iter = 2000) round(my_design$design, 3) #>     location weight #> 1      -1.00  0.252 #> 29     -0.44  0.248 #> 73      0.44  0.248 #> 101     1.00  0.252 my_design$val #> [1] 5.261603"},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"Calculate loss function -, c- D-optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"","code":"calc_phi(   design,   theta,   FUN,   tt,   A,   criterion = \"D\",   cVec = rep(0, length(theta)) )"},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"design resulted design contains design points associated weights theta parameter value model FUN function calculate derivative given model. tt level skewness calculated covariance matrix criterion criterion used design, either \"D\" D-optimality \"\" -optimality. Default \"D\". cVec c vector used determine combination parameters. used c-optimality","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"loss model design points","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"function calculates loss function design problem - D-optimality. loss functions -, D-optimality defined trace log determinant inverse Fisher information matrix","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/calc_phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the loss function of the A-, c- or D-optimal design — calc_phi","text":"","code":"my_design <- data.frame(location = c(0, 180), weight = c(1/2, 1/2)) theta <- c(0.05, 0.5) peleg <- function(xi, theta){    deno <- (theta[1] + xi * theta[2])^2    rbind(-xi/deno, -xi^2/deno) } A <- matrix(c(1, 0, 0, 0, 0.2116, 1.3116, 0, 1.3116, 15.462521), byrow = TRUE, ncol = 3) res <- calc_phi(my_design, theta, peleg, 0, A, criterion = \"A\") res #> [1]  0.0000 10.2395"},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"Calculate c-optimal design SLSE given combination parameters","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"","code":"copt(N, u, tt, FUN, theta, num_iter = 1000, cVec)"},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"N number sample points design space. u discretized design space. tt level skewness. tt=0, equivalent compute c-optimal design ordinary least squares estimator. FUN function calculate derivative given model. theta parameter value model. num_iter Maximum number iteration. cVec c vector used determine combination parameters","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"list contains 1. Value objective function solution. 2. Status. 3. Optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"function calculates c-optimal design loss function c-optimality. loss function c-optimality defined log determinant inverse Fisher information matrix.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/copt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the c-optimal design under the SLSE with the given combination of the parameters — copt","text":"","code":"poly3 <- function(xi, theta){   matrix(c(1, xi, xi^2, xi^3), ncol = 1) } Npt <- 101 my_design <- copt(N = Npt, u = seq(-1, +1, length.out = Npt),    tt = 0, FUN = poly3, theta = rep(0,4), num_iter = 2000,    cVec = c(0,1,1,1)) round(my_design$design, 3) #>     location weight #> 51         0    0.5 #> 101        1    0.5 my_design$val #> [1] 3.999952"},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"Verify optimality condition optimal design (-, c- D-optimality)","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"","code":"plot_dispersion(   u,   design,   tt,   FUN,   theta,   criterion = \"D\",   cVec = rep(0, length(theta)) )"},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"u discretized design points design optimal design containing design points associated weights tt level skewness FUN function calculate derivative given model theta parameter value model criterion optimality criterion: one \"\", \"c\", \"D\" cVec c vector used determine combination parameters. used c-optimality","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"plot verifying general equivalence condition specified optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"function visualizes directional derivative -, c-, D-optimality using general equivalence theorem. optimal design, directional derivative exceed reference threshold","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_dispersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify the optimality condition for an optimal design (A-, c- or D-optimality) — plot_dispersion","text":"","code":"poly3 <- function(xi, theta){   matrix(c(1, xi, xi^2, xi^3), ncol = 1) } design_A <- data.frame(location = c(-1, -0.464, 0.464, 1),                        weight = c(0.151, 0.349, 0.349, 0.151)) design_D = data.frame(location = c(-1, -0.447, 0.447, 1),                       weight = rep(0.25, 4)) u <- seq(-1, 1, length.out = 201) par(mfrow = c(2,2)) plot_dispersion(u, design_A, tt = 0, FUN = poly3, theta = rep(0, 4), criterion = \"A\") plot_dispersion(u, design_A, tt = 0, FUN = poly3, theta = rep(0, 4), criterion = \"D\")  plot_dispersion(u, design_D, tt = 0, FUN = poly3, theta = rep(0, 4), criterion = \"A\") plot_dispersion(u, design_D, tt = 0, FUN = poly3, theta = rep(0, 4), criterion = \"D\")"},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"Plot weight distribution optimal design univaraite regression model","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"","code":"plot_weight(design)"},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"design resulted design contains design points associated weights","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"plot shows given optimal design","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"functions produce figure contains location associated weights resulted optimal design measures.","code":""},{"path":"https://chikuang.github.io/SLSEdesign/reference/plot_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the weight distribution of the optimal design for univaraite regression model — plot_weight","text":"","code":"Des = list(location = c(-1, +1), weight = c(0.5, 0.5)) plot_weight(Des)"}]
